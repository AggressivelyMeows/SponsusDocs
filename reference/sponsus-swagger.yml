swagger: '2.0'
info:
  version: 1.0.0
  title: API
  description: ''
  contact:
    email: developers@sponsus.org
    name: Sponsus
  license:
    url: 'about:blank'
    name: Empty
schemes:
  - https
securityDefinitions:
  Authentication:
    type: apiKey
    in: header
    description: |-
      This is the header that allows you to login as a user. Please only use API keys for this. Your account will be disabled if you use your login token for API access.

      If there is something you want access but its not avalible via API keys, please contact us at developers@sponsus.org
security: null
definitions:
  Profile:
    title: Profile
    type: object
    x-examples:
      Profile:
        description: 'awoo!'
        about: 'Hi, im Cerulean and im making a new API system that will allow developers to create much more indepth integrations!'
        status: public
        theme: '#0a62ac'
        tags: []
        is_nsfw: false
        cards: []
        nickname: 'Nickname testing thing!'
        username: Cerulean
        _id: '1729788214794915840'
    description: A profile object used to describe a creator.
    properties:
      _id:
        type: string
      about:
        type: string
      status:
        type: string
      theme:
        type: string
      tags:
        type: array
        items:
          type: string
      is_nsfw:
        type: string
      cards:
        type: array
        items:
          $ref: ''
      nickname:
        type: string
      username:
        type: string
  ProfileCard:
    title: ProfileCard
    type: object
    x-examples:
      card:
        title: AWOO
        content: AWEOO
        image: 'https://cdn.ceru.tech/sponsus/1729788214794915840/1818387122831364096.png'
        link: ''
    properties:
      title:
        type: string
      content:
        type: string
      image:
        type: string
      link:
        type: string
  APIError:
    title: APIError
    type: object
    properties:
      success:
        type: boolean
      error:
        type: string
      code:
        type: string
    x-examples:
      AuthError:
        success: false
        error: Authentication token is invalid or not present
        status: 403
  APIBasicSuccess:
    title: APIBasicSuccess
    type: object
    properties:
      success:
        type: boolean
    x-examples:
      'Its just an object with success, nothing fancy':
        success: true
  Tier:
    title: Tier
    type: object
    x-examples:
      example-1:
        _id: '1732814647763013632'
        title: 'Sponsor Sponsus!'
        price: 5
        description: 'Demo tier. This can contain **markdown!**'
        userID: '1729788214794915840'
        advanced:
          limit:
            enabled: true
            max: 6
          discord_role:
            name: Writing Team
            id: '622152828831662096'
        created_at: 1556109420.166289
    description: A tier for a creator.
    properties:
      _id:
        type: string
      title:
        type: string
      price:
        type: number
      description:
        type: string
      userID:
        type: string
      advanced:
        type: object
        properties:
          limit:
            type: object
            properties:
              enalbed:
                type: boolean
              max:
                type: number
          discord_role:
            type: object
            properties:
              name:
                type: string
              id:
                type: string
          '':
            type: string
      created_at:
        type: number
      support:
        type: object
        properties:
          is_supporting:
            type: boolean
    required:
      - _id
      - title
      - price
      - description
      - userID
  APIKeyNoPermissions:
    title: APIKeyNoPermissions
    type: object
    properties:
      success:
        type: string
      error:
        type: string
      code:
        type: string
      missing_permission:
        type: string
    x-examples:
      Example:
        success: false
        error: 'API key does not have permission to read to "payments.tiers"'
        code: KEY_INVALID
        missing_permission: payments.tiers.read
    description: This is where the API cannot fulfil the request due to the API key not having the correct permissions.
  Sponsorship:
    title: Sponsorship
    type: object
    properties:
      tier:
        $ref: '#/definitions/Tier'
      price:
        type: number
      owner:
        $ref: '#/definitions/Profile'
      is_active:
        type: boolean
      is_custom:
        type: boolean
      charge_amount:
        type: number
  IncomingSponsorship:
    title: IncomingSponsorship
    type: object
    description: Slightly different to the standard sponsorship object. Needs more information and doesnt need to provide creator context (since the person calling the route is the creator)
    properties:
      userID:
        type: string
      created_at:
        type: number
      is_active:
        type: boolean
      targetID:
        type: string
      tier:
        $ref: '#/definitions/Tier'
      has_paid:
        type: boolean
      current_month:
        type: string
      is_custom:
        type: boolean
      active_total:
        type: number
      active_sponsorship_total:
        type: number
    required:
      - userID
      - created_at
      - is_active
      - targetID
      - has_paid
      - current_month
  Charge:
    title: Charge
    type: object
    properties:
      _id:
        type: string
      amount:
        type: string
      destination:
        $ref: '#/definitions/BasicUser'
      created_at:
        type: string
      avalible_at:
        type: string
      user:
        $ref: '#/definitions/BasicUser'
      type:
        type: string
      avalible_percent:
        type: string
      created_at_stamp:
        type: string
    required:
      - _id
      - amount
      - created_at
      - avalible_at
    description: ''
  BasicUser:
    title: BasicUser
    type: object
    properties:
      _id:
        type: string
      username:
        type: string
    description: This is a shortform User object
  PostTag:
    title: PostTag
    type: array
    items:
      type:
        - string
        - number
tags:
  - name: authentication
  - name: pay
  - name: profile
  - name: oauth
  - name: posts
  - name: files
  - name: webhooks
  - name: events
  - name: search
  - name: seo
  - name: integrations
  - name: admin
  - name: feed
  - name: comm
  - name: chat
  - name: perm
  - name: comments
  - name: emoji
  - name: notifications
  - name: redash
  - name: dev
paths:
  /v1/auth/@me:
    post:
      operationId: authentication.manage_user_account
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - authentication
      parameters:
        - in: body
          name: updates
          description: Your username
          schema:
            type: object
            properties:
              username:
                type: string
              view_nsfw:
                type: boolean
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/APIBasicSuccess'
          examples:
            example-1: {}
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/APIError'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/APIError'
      security:
        - Authentication: []
      summary: Update user account
  /v1/payments/@me/statistics:
    get:
      operationId: payments.payment_stats
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              success:
                type: string
                description: 'Beep!'
              total:
                type: number
                description: Amount given to this user per month from sponsors
              due:
                type: number
                description: How much this user must pay each month
              sponsorships:
                type: number
                description: How many creators this user is sponsoring
              sponsors:
                type: number
                description: How many people are sponsoring this creator
          examples:
            example-1:
              success: true
              total: 5
              sponsorships: 1
              due: 1
              sponsoring: 1
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/APIError'
      description: Get the monthly stats for the user.
      security:
        - Authentication: []
      tags:
        - payments
      summary: Get payment stats
  '/v1/payments/{userID}/tiers':
    get:
      operationId: payments.get_user_tiers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type:
                  - string
                  - boolean
              tiers:
                type: array
                items:
                  $ref: '#/definitions/Tier'
          description: ''
          examples:
            Example:
              success: true
              tiers:
                - _id: '1732814647763013632'
                  title: 'Sponsor Sponsus!'
                  price: 5
                  description: |-
                    Testing tier for content and such

                    **Rewards**
                    * Cool role on our **Discord**
                    * Hugs from me <3
                  userID: '1729788214794915840'
                  advanced:
                    limit:
                      enabled: true
                      max: 6
                    discord_role:
                      name: Writing Team
                      id: '622152828831662096'
                  created_at: 1556109420.166289
      description: 'Gets the creators tiers for display on the front end. If you want to edit tiers, use /payments/@me/tiers.'
      tags:
        - payments
      summary: Get creators tiers
  '/v1/payments/{userID}/tiers/{tierID}':
    get:
      operationId: payments.get_tier.get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: tierID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: string
              tier:
                $ref: '#/definitions/Tier'
          description: ''
        '404':
          description: The requested tier does not exist
          schema:
            $ref: '#/definitions/APIError'
      description: ''
      tags:
        - payments
      summary: Get a single tier
  '/v1/payments/{userID}/tiers/{tierID}/remaining_slots':
    get:
      operationId: payments.get_tier
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: tierID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: boolean
              total_left:
                type: number
                description: How many sponsorship slots are left before no more can be added.
          description: ''
          examples:
            Example:
              success: true
              total_left: 5
        '400':
          description: Tier is not limited
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: Tier was not found
          schema:
            $ref: '#/definitions/APIError'
      tags:
        - payments
      summary: Get a tiers remaining open slots
      description: Tells you how many slots are open for sponsorships. Used in the UI to show how many are left.
  /v1/payments/@me/tiers:
    get:
      operationId: payments.manage_tiers.get
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: boolean
              tiers:
                type: array
                items:
                  $ref: '#/definitions/Tier'
          examples:
            Example:
              success: true
              tiers:
                - _id: '1732814647763013632'
                  title: 'Sponsor Sponsus!'
                  price: 5
                  description: 'Demo tier!'
                  userID: '1729788214794915840'
                  advanced:
                    limit:
                      enabled: true
                      max: 6
                    discord_role:
                      name: Writing Team
                      id: '622152828831662096'
                  created_at: 1556109420.166289
          description: ''
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
      tags:
        - payments
      description: Requires payments.tiers.read
      security:
        - Authentication: []
      summary: Get all tiers
    post:
      operationId: payments.manage_tiers.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - pay
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 1
                maxLength: 50
              description:
                type: string
                maxLength: 25000
              price:
                type: number
                minimum: 1
                maximum: 500
              advanced:
                type: object
                properties:
                  discord_role:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                  limit:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      max:
                        type: number
            required:
              - title
              - description
              - price
          x-examples:
            Example:
              title: New tier
              description: 'This is some markdown text :sparkles:'
              price: 10
              advanced:
                discord_role:
                  id: '595004584506687489'
                  name: Ceru
                limit:
                  enabled: true
                  max: 1
        - in: body
          name: body
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              price:
                type: number
              advanced:
                type: object
                properties:
                  discord_role:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                  limit:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      max:
                        type: number
              '':
                type: string
          x-examples:
            example-1: {}
      responses:
        '201':
          description: Created
          schema:
            type: object
            properties:
              success:
                type: boolean
              tier:
                $ref: '#/definitions/Tier'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
      description: Requires payments.tiers.write
      security:
        - Authentication: []
      summary: Create a new tier
  '/v1/payments/@me/tiers/{tierID}':
    delete:
      operationId: payments.manage_tier.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - pay
      parameters:
        - type: string
          required: true
          in: path
          name: tierID
      responses:
        '200':
          schema:
            $ref: '#/definitions/APIBasicSuccess'
      summary: Delete a tier
      description: ''
    post:
      operationId: payments.manage_tier.post
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          required: true
          in: path
          name: tierID
        - in: body
          name: body
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              advanced:
                type: object
                properties:
                  discord_role:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                  limit:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      max:
                        type: number
          x-examples:
            Example:
              title: This title should be changed
              price: 1
              description: New description
              userID: '1729788214794915840'
              advanced:
                limit:
                  enabled: false
                  max: 0
              created_at: 1557014705.521609
              is_active: true
          description: All fields are optional but you must send at least 1 field.
        - in: body
          name: body
          schema:
            type: object
            properties: {}
          x-examples:
            example-1: {}
      responses:
        '200':
          description: Update successful
          schema:
            $ref: '#/definitions/APIBasicSuccess'
          examples:
            Example: {}
        '401':
          description: You do not have permission to write to payments.tiers
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
        '403':
          description: You do not have write access to this tier.
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/APIError'
      tags:
        - payments
      summary: Update a tier
      security:
        - Authentication: []
      description: Requires payments.tiers.write
  /v1/payments/@me/supporting:
    get:
      operationId: payments.get_user_supporting
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: string
              supporting:
                type: array
                items:
                  $ref: '#/definitions/Sponsorship'
          description: ''
      tags:
        - payments
      summary: Get all creators this user is sponsoring
      description: Requires payments.sponsoring.read
      security:
        - Authentication: []
  '/v1/payments/{userID}/sponsoring':
    get:
      operationId: payments.get_user_sponsoring_status
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: boolean
              sponsorship:
                $ref: '#/definitions/IncomingSponsorship'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/APIError'
      tags:
        - payments
      description: |-
        Gets an IncomingSponsorship object if the target user is sponsoring you.

        Requires payments.sponsorships.read
        **(Sponsorships and sponsoring are two different permissions!!)**
      security:
        - Authentication: []
      summary: Get sponsorship status of a user
  '/v1/payments/{userID}/donations/settings':
    get:
      operationId: payments.set_donation_settings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          examples:
            Example:
              success: true
              enabled: true
              length: 1month
              limit: Thu 13/02/2020
              social_media_image: 'https://cdn.ceru.tech/sponsus/1729788214794915840/1736565642238234624.png'
          schema:
            type: object
            properties:
              success:
                type: boolean
              enabled:
                type: boolean
              length:
                type: string
              limit:
                type: string
              social_media_image:
                type: string
          description: ''
        '404':
          description: User does not exist
          schema:
            $ref: '#/definitions/APIError'
      tags:
        - payments
      summary: Get a creators donation settings
  /v1/payments/@me/charges:
    get:
      operationId: payments.get_charges
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: string
              charges:
                type: array
                items:
                  $ref: '#/definitions/Charge'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
      tags:
        - payments
      description: Requires payments.charges.read
  '/v1/profiles/{userID}/per_month':
    get:
      operationId: profile.calc_per_month.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          examples:
            Example:
              success: true
              total: 10
              sponsors: 2
          schema:
            type: object
            properties:
              success:
                type: string
              sponsors:
                type: number
                description: How many sponsorships does this creator have
              total:
                type: number
                description: 'How much, in $, does this creator get'
            required:
              - success
      summary: Get
    post:
      operationId: profile.calc_per_month.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  '/v1/profiles/{userID}/post_tags':
    get:
      operationId: profile.get_post_tags
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: string
              tags:
                type: array
                items:
                  $ref: '#/definitions/PostTag'
          examples:
            Example: {}
      summary: Get a creators post tags
  '/v1/profiles/{userID}/post_total':
    get:
      operationId: profile.get_post_total
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: string
              total:
                type: number
      description: Gets a total of all posts released by this creator (for use in the frontend)
      summary: Get a creators post count
  /v1/profiles/@me:
    get:
      operationId: profile.get_set_user_profile.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters: []
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: string
              profile:
                $ref: '#/definitions/Profile'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
      summary: "Get the logged in user's profile"
      security:
        - Authentication: []
      description: Requires profile.profile.read
    post:
      operationId: profile.get_set_user_profile.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              description:
                type: string
              about:
                type: string
              theme:
                type: string
              tags:
                type: array
                items:
                  type: string
              is_nsfw:
                type: boolean
              cards:
                $ref: '#/definitions/ProfileCard'
              nickname:
                type: string
          description: Updates based on the fields provided.
          x-examples:
            Example - Remove nickname:
              nickname: null
            Example - Update more than 1 value:
              about: 'Hello!'
              description: This is a new description
        - in: body
          name: body
          schema:
            type: object
            properties:
              description:
                type: string
              about:
                type: string
              theme:
                type: string
              tags:
                type: array
                items:
                  type: string
              is_nsfw:
                type: boolean
              cards:
                $ref: '#/definitions/ProfileCard'
              nickname:
                type: string
          description: Updates based on the fields provided.
          x-examples:
            Example - Remove nickname:
              nickname: null
            example-2: {}
        - in: body
          name: body
          schema:
            type: object
            properties:
              description:
                type: string
              about:
                type: string
              theme:
                type: string
              tags:
                type: array
                items:
                  type: string
              is_nsfw:
                type: boolean
              cards:
                $ref: '#/definitions/ProfileCard'
              nickname:
                type: string
          description: Updates based on the fields provided.
          x-examples:
            example-1: {}
      responses:
        '200':
          schema:
            $ref: '#/definitions/APIBasicSuccess'
          examples: {}
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
      summary: Update your profile
      description: Requires profile.profile.write
      security:
        - Authentication: []
  '/v1/profiles/{userID}':
    get:
      operationId: profile.get_user_profile
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: string
              profile:
                $ref: '#/definitions/Profile'
      description: ''
      summary: Get a creators profile
  '/v1/profiles/{userID}/avatar/info':
    get:
      operationId: profile.get_user_avatar_info
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          schema:
            type: object
            properties:
              success:
                type: boolean
              is_image:
                type: string
              key:
                type: string
      summary: "Get user's avatar info"
      description: This is used to check if an avatar is a video or image. The `key` param is used to beat caching while giving us caching.
  '/v1/profiles/{userID}/avatar/{key}':
    get:
      operationId: profile.get_user_avatar_with_key.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: key
      responses:
        '200':
          schema:
            type: 'null'
          headers: {}
      summary: Get a users avatar
      description: 'Returns an image suitable for your device (WebP for those who support it, PNG for those who cant)'
    head:
      operationId: profile.get_user_avatar_with_key.head
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: key
      responses:
        '200': {}
  '/v1/profiles/{userID}/avatar':
    get:
      operationId: profile.get_user_avatar.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200':
          schema:
            type: 'null'
      description: 'Returns an image suitable for your device (WebP for those who support it, PNG for those who cant)'
      summary: Get a users avatar
    head:
      operationId: profile.get_user_avatar.head
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  '/v1/profiles/{userID}/background':
    get:
      operationId: profile.get_user_background
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
      description: 'Returns an image suitable for your device (WebP for those who support it, PNG for those who cant)'
      summary: Get a users background
  /v1/profiles/@me/avatar/upload:
    post:
      operationId: profile.upload_user_avatar
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - in: formData
          type: file
          name: file
          description: The new avatar in file form
      responses:
        '200':
          schema:
            $ref: '#/definitions/APIBasicSuccess'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
      description: Requires profile.manage_images.write
      security:
        - Authentication: []
      summary: "Update the user's avatar"
  /v1/profiles/@me/background/upload:
    post:
      operationId: profile.upload_user_background
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - profile
      parameters:
        - in: formData
          type: string
      responses:
        '200':
          schema:
            $ref: '#/definitions/APIBasicSuccess'
        '400':
          description: The was an error while uploading
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIKeyNoPermissions'
      description: Requires profile.manage_images.write
      security:
        - Authentication: []
      summary: "Update the user's background"
  /v1/oauth/@me/profile:
    get:
      operationId: oauth.oauth_get_profile
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - oauth
      parameters: []
      responses:
        '200': {}
  '/v1/posts/@me/post/{postID}/secret_keys/{keyID}':
    delete:
      operationId: posts.delete_post_secret_keys
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: postID
        - type: string
          required: true
          in: path
          name: keyID
      responses:
        '200': {}
  '/v1/posts/@me/post/{postID}/secret_keys':
    get:
      operationId: posts.get_post_secret_keys.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
    delete:
      operationId: posts.get_post_secret_keys.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
    post:
      operationId: posts.get_post_secret_keys.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/posts/{userID}/post/{postID}/publish':
    post:
      operationId: posts.publish_post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/posts/{userID}/post/{postID}':
    get:
      operationId: posts.get_post.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
    delete:
      operationId: posts.get_post.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
    post:
      operationId: posts.get_post.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: userID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/posts/{userID}':
    get:
      operationId: posts.get_posts
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  /v1/posts/@me:
    post:
      operationId: posts.create_a_post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters: []
      responses:
        '200': {}
  '/v1/posts/{creatorID}/{postID}/poll':
    get:
      operationId: posts.poll_post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: creatorID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/posts/{creatorID}/{postID}/poll/verify':
    get:
      operationId: posts.verify_poll_results
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: creatorID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/posts/{creatorID}/{postID}/poll/answer':
    post:
      operationId: posts.poll_post.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: creatorID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/posts/{creatorID}/{postID}/poll/results':
    get:
      operationId: posts.get_poll_results
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: creatorID
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/posts/@me/{postID}/poll/close':
    get:
      operationId: posts.toggle_poll
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - posts
      parameters:
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  /v1/files/@me:
    get:
      operationId: files.manage_files.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - files
      parameters: []
      responses:
        '200': {}
    post:
      operationId: files.manage_files.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - files
      parameters: []
      responses:
        '200': {}
  '/v1/files/@me/{fileID}':
    delete:
      operationId: files.manage_file
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - files
      parameters:
        - type: string
          required: true
          in: path
          name: fileID
      responses:
        '200': {}
  /v1/events/@me:
    get:
      operationId: events.get_events
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - events
      parameters: []
      responses:
        '200': {}
  /v1/search:
    get:
      operationId: search.search
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - search
      parameters: []
      responses:
        '200': {}
  /v1/search/@me/total_sponsors:
    get:
      operationId: search.search_sponsors
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - search
      parameters: []
      responses:
        '200': {}
  /v1/search/@me/sponsors:
    post:
      operationId: search.search_sponsors.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - search
      parameters: []
      responses:
        '200': {}
  /v1/integrations/discord:
    get:
      operationId: integrations.manage_discord_integration.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters: []
      responses:
        '200': {}
    delete:
      operationId: integrations.manage_discord_integration.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters: []
      responses:
        '200': {}
    post:
      operationId: integrations.manage_discord_integration.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters: []
      responses:
        '200': {}
  /v1/integrations/discord/roles:
    get:
      operationId: integrations.get_discord_roles
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters: []
      responses:
        '200': {}
  '/v1/integrations/{userID}/discord/server':
    get:
      operationId: integrations.get_discord_server
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  '/v1/integrations/{userID}/discord/invite':
    get:
      operationId: integrations.get_discord_invite
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  '/v1/integrations/discord/{userID}/settings':
    get:
      operationId: integrations.get_set_discord_settings.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
      description: ''
    post:
      operationId: integrations.get_set_discord_settings.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - integrations
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  /v1/feed/@me/total:
    get:
      operationId: feed.get_total_post_count
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - feed
      parameters: []
      responses:
        '200': {}
  /v1/feed/@me:
    get:
      operationId: feed.get_feed
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - feed
      parameters: []
      responses:
        '200': {}
  /v1/chat/@me/privacy_settings:
    get:
      operationId: chat.get_set_privacy_settings.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
    post:
      operationId: chat.get_set_privacy_settings.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
  '/v1/chat/@me/block_list/{targetID}':
    delete:
      operationId: chat.unblock_user
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: targetID
      responses:
        '200': {}
  /v1/chat/@me/block_list:
    get:
      operationId: chat.block_user.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
    delete:
      operationId: chat.block_user.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
      description: ''
    post:
      operationId: chat.block_user.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
  /v1/chat/@me/unread:
    get:
      operationId: chat.manage_messages
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
  '/v1/chat/{convoID}/ack':
    post:
      operationId: chat.manage_messages.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: convoID
      responses:
        '200': {}
  '/v1/chat/{convoID}/messages/{messageID}':
    delete:
      operationId: chat.manage_message.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: convoID
        - type: string
          required: true
          in: path
          name: messageID
      responses:
        '200': {}
    post:
      operationId: chat.manage_message.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: convoID
        - type: string
          required: true
          in: path
          name: messageID
      responses:
        '200': {}
  '/v1/chat/{convoID}/messages':
    get:
      operationId: chat.manage_messages.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: convoID
      responses:
        '200': {}
    post:
      operationId: chat.manage_messages.post_
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: convoID
      responses:
        '200': {}
  /v1/chat/@me/rtm/unread/start:
    get:
      operationId: chat.create_notice_rtm_link
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
  '/v1/chat/{convoID}/rtm/start':
    get:
      operationId: chat.create_rtm_link
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: convoID
      responses:
        '200': {}
  /v1/chat/@me/conversations:
    get:
      operationId: chat.get_conversations
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
  '/v1/chat/{convoID}/members/{userID}':
    delete:
      operationId: chat.remove_user
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters:
        - type: string
          required: true
          in: path
          name: convoID
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  /v1/chat/@me/new_conversation:
    post:
      operationId: chat.create_conversation
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
  /v1/chat/search:
    get:
      operationId: chat.search_for_users
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - chat
      parameters: []
      responses:
        '200': {}
  /v1/permissions/@me/roles/positions:
    get:
      operationId: perm.manage_role_positions.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters: []
      responses:
        '200': {}
    post:
      operationId: perm.manage_role_positions.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters: []
      responses:
        '200': {}
  /v1/permissions/@me/roles:
    get:
      operationId: perm.manage_creator_roles.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters: []
      responses:
        '200': {}
    post:
      operationId: perm.manage_creator_roles.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters: []
      responses:
        '200': {}
  '/v1/permissions/@me/roles/{roleID}':
    delete:
      operationId: perm.manage_creator_role.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters:
        - type: string
          required: true
          in: path
          name: roleID
      responses:
        '200': {}
    post:
      operationId: perm.manage_creator_role.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters:
        - type: string
          required: true
          in: path
          name: roleID
      responses:
        '200': {}
  /v1/permissions/@me/team:
    get:
      operationId: perm.manage_creator_team
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters: []
      responses:
        '200': {}
  /v1/permissions/@me/team/search:
    get:
      operationId: perm.search_for_users
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters: []
      responses:
        '200': {}
  '/v1/permissions/@me/team/{userID}/invite':
    get:
      operationId: perm.invite_user_to_team.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
    post:
      operationId: perm.invite_user_to_team.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters:
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  '/v1/permissions/{creatorID}/team/accept_invite':
    get:
      operationId: perm.accept_invite_user_to_team
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters:
        - type: string
          required: true
          in: path
          name: creatorID
      responses:
        '200': {}
  '/v1/permissions/{creatorID}/team/{userID}':
    delete:
      operationId: perm.manage_user_from_team.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters:
        - type: string
          required: true
          in: path
          name: creatorID
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
    post:
      operationId: perm.manage_user_from_team.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters:
        - type: string
          required: true
          in: path
          name: creatorID
        - type: string
          required: true
          in: path
          name: userID
      responses:
        '200': {}
  /v1/permissions/@me/teams:
    get:
      operationId: perm.get_user_teams
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - perm
      parameters: []
      responses:
        '200': {}
  '/v1/comments/{postID}':
    get:
      operationId: comments.manage_comments.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
    post:
      operationId: comments.manage_comments.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
      responses:
        '200': {}
  '/v1/comments/{postID}/comment/{commentID}':
    delete:
      operationId: comments.manage_comment.delete
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
        - type: string
          required: true
          in: path
          name: commentID
      responses:
        '200': {}
    post:
      operationId: comments.manage_comment.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
        - type: string
          required: true
          in: path
          name: commentID
      responses:
        '200': {}
  '/v1/comments/{postID}/comment/{commentID}/replies/stats':
    get:
      operationId: comments.replies_stats.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
        - type: string
          required: true
          in: path
          name: commentID
      responses:
        '200': {}
    post:
      operationId: comments.replies_stats.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
        - type: string
          required: true
          in: path
          name: commentID
      responses:
        '200': {}
  '/v1/comments/{postID}/comment/{commentID}/replies':
    get:
      operationId: comments.manage_comment_replies.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
        - type: string
          required: true
          in: path
          name: commentID
      responses:
        '200': {}
    post:
      operationId: comments.manage_comment_replies.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - comments
      parameters:
        - type: string
          required: true
          in: path
          name: postID
        - type: string
          required: true
          in: path
          name: commentID
      responses:
        '200': {}
  /v1/notifications/@me/unread_count:
    get:
      operationId: notifications.get_recent_notifs
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - notifications
      parameters: []
      responses:
        '200': {}
  /v1/notifications/@me:
    get:
      operationId: notifications.get_notifications
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - notifications
      parameters: []
      responses:
        '200': {}
  '/v1/notifications/{notifID}/read':
    post:
      operationId: notifications.set_read
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - notifications
      parameters:
        - type: string
          required: true
          in: path
          name: notifID
      responses:
        '200': {}
  /v1/notifications/@me/auth:
    get:
      operationId: notifications.set_user_key
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - notifications
      parameters: []
      responses:
        '200': {}
  /v1/notifications/@me/settings:
    get:
      operationId: notifications.get_set_settings.get
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - notifications
      parameters: []
      responses:
        '200': {}
    post:
      operationId: notifications.get_set_settings.post
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - notifications
      parameters: []
      responses:
        '200': {}
host: api.sponsus.org
produces:
  - application/json
  - multipart/form-data
consumes:
  - application/json
