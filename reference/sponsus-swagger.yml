openapi: 3.0.0
info:
  version: "1.0.0-oas3"
  title: API
  description: ''
  contact:
    email: developers@sponsus.org
    name: Sponsus
  license:
    url: 'about:blank'
    name: Empty
security: []
tags:
  - name: authentication
  - name: pay
  - name: profile
  - name: oauth
  - name: posts
  - name: files
  - name: webhooks
  - name: events
  - name: search
  - name: seo
  - name: integrations
  - name: admin
  - name: feed
  - name: comm
  - name: chat
  - name: perm
  - name: comments
  - name: emoji
  - name: notifications
  - name: redash
  - name: dev
paths:
  /v1/auth/@me:
    post:
      operationId: authentication.manage_user_account
      tags:
        - authentication
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                x-examples:
                  'Its just an object with success, nothing fancy':
                    success: true
                properties:
                  success:
                    type: boolean
                type: object
                title: APIBasicSuccess
            example-1:
              examples:
                response:
                  value: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
      security:
        - Authentication: []
      summary: Update user account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                view_nsfw:
                  type: boolean
        description: Your username
  /v1/payments/@me/statistics:
    get:
      operationId: payments.payment_stats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    description: Beep!
                  total:
                    type: number
                    description: Amount given to this user per month from sponsors
                  due:
                    type: number
                    description: How much this user must pay each month
                  sponsorships:
                    type: number
                    description: How many creators this user is sponsoring
                  sponsors:
                    type: number
                    description: How many people are sponsoring this creator
            example-1:
              examples:
                response:
                  value:
                    success: true
                    total: 5
                    sponsorships: 1
                    due: 1
                    sponsoring: 1
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
      description: Get the monthly stats for the user.
      security:
        - Authentication: []
      tags:
        - payments
      summary: Get payment stats
  '/v1/payments/{userID}/tiers':
    get:
      operationId: payments.get_user_tiers
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tiers:
                    type: array
                    items:
                      required:
                        - _id
                        - title
                        - price
                        - description
                        - userID
                      properties:
                        _id:
                          type: string
                        title:
                          type: string
                        price:
                          type: number
                        description:
                          type: string
                        userID:
                          type: string
                        advanced:
                          type: object
                          properties:
                            limit:
                              type: object
                              properties:
                                enalbed:
                                  type: boolean
                                max:
                                  type: number
                            discord_role:
                              type: object
                              properties:
                                name:
                                  type: string
                                id:
                                  type: string
                            '':
                              type: string
                        created_at:
                          type: number
                        support:
                          type: object
                          properties:
                            is_supporting:
                              type: boolean
                      description: A tier for a creator.
                      x-examples:
                        example-1:
                          _id: '1732814647763013632'
                          title: Sponsor Sponsus!
                          price: 5
                          description: Demo tier. This can contain **markdown!**
                          userID: '1729788214794915840'
                          advanced:
                            limit:
                              enabled: true
                              max: 6
                            discord_role:
                              name: Writing Team
                              id: '622152828831662096'
                          created_at: 1556109420.166289
                      type: object
                      title: Tier
            Example:
              examples:
                response:
                  value:
                    success: true
                    tiers:
                      - _id: '1732814647763013632'
                        title: Sponsor Sponsus!
                        price: 5
                        description: |-
                          Testing tier for content and such

                          **Rewards**
                          * Cool role on our **Discord**
                          * Hugs from me <3
                        userID: '1729788214794915840'
                        advanced:
                          limit:
                            enabled: true
                            max: 6
                          discord_role:
                            name: Writing Team
                            id: '622152828831662096'
                        created_at: 1556109420.166289
      description: >-
        Gets the creators tiers for display on the front end. If you want to
        edit tiers, use /payments/@me/tiers.
      tags:
        - payments
      summary: Get creators tiers
  '/v1/payments/{userID}/tiers/{tierID}':
    get:
      operationId: payments.get_tier.get
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: tierID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  tier:
                    required:
                      - _id
                      - title
                      - price
                      - description
                      - userID
                    properties:
                      _id:
                        type: string
                      title:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      userID:
                        type: string
                      advanced:
                        type: object
                        properties:
                          limit:
                            type: object
                            properties:
                              enalbed:
                                type: boolean
                              max:
                                type: number
                          discord_role:
                            type: object
                            properties:
                              name:
                                type: string
                              id:
                                type: string
                          '':
                            type: string
                      created_at:
                        type: number
                      support:
                        type: object
                        properties:
                          is_supporting:
                            type: boolean
                    description: A tier for a creator.
                    x-examples:
                      example-1:
                        _id: '1732814647763013632'
                        title: Sponsor Sponsus!
                        price: 5
                        description: Demo tier. This can contain **markdown!**
                        userID: '1729788214794915840'
                        advanced:
                          limit:
                            enabled: true
                            max: 6
                          discord_role:
                            name: Writing Team
                            id: '622152828831662096'
                        created_at: 1556109420.166289
                    type: object
                    title: Tier
        '404':
          description: The requested tier does not exist
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
      description: ''
      tags:
        - payments
      summary: Get a single tier
  '/v1/payments/{userID}/tiers/{tierID}/remaining_slots':
    get:
      operationId: payments.get_tier
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: tierID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  total_left:
                    type: number
                    description: >-
                      How many sponsorship slots are left before no more can be
                      added.
            Example:
              examples:
                response:
                  value:
                    success: true
                    total_left: 5
        '400':
          description: Tier is not limited
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
        '404':
          description: Tier was not found
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
      tags:
        - payments
      summary: Get a tiers remaining open slots
      description: >-
        Tells you how many slots are open for sponsorships. Used in the UI to
        show how many are left.
  /v1/payments/@me/tiers:
    get:
      operationId: payments.manage_tiers.get
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tiers:
                    type: array
                    items:
                      required:
                        - _id
                        - title
                        - price
                        - description
                        - userID
                      properties:
                        _id:
                          type: string
                        title:
                          type: string
                        price:
                          type: number
                        description:
                          type: string
                        userID:
                          type: string
                        advanced:
                          type: object
                          properties:
                            limit:
                              type: object
                              properties:
                                enalbed:
                                  type: boolean
                                max:
                                  type: number
                            discord_role:
                              type: object
                              properties:
                                name:
                                  type: string
                                id:
                                  type: string
                            '':
                              type: string
                        created_at:
                          type: number
                        support:
                          type: object
                          properties:
                            is_supporting:
                              type: boolean
                      description: A tier for a creator.
                      x-examples:
                        example-1:
                          _id: '1732814647763013632'
                          title: Sponsor Sponsus!
                          price: 5
                          description: Demo tier. This can contain **markdown!**
                          userID: '1729788214794915840'
                          advanced:
                            limit:
                              enabled: true
                              max: 6
                            discord_role:
                              name: Writing Team
                              id: '622152828831662096'
                          created_at: 1556109420.166289
                      type: object
                      title: Tier
            Example:
              examples:
                response:
                  value:
                    success: true
                    tiers:
                      - _id: '1732814647763013632'
                        title: Sponsor Sponsus!
                        price: 5
                        description: Demo tier!
                        userID: '1729788214794915840'
                        advanced:
                          limit:
                            enabled: true
                            max: 6
                          discord_role:
                            name: Writing Team
                            id: '622152828831662096'
                        created_at: 1556109420.166289
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
      tags:
        - payments
      description: Requires payments.tiers.read
      security:
        - Authentication: []
      summary: Get all tiers
    post:
      operationId: payments.manage_tiers.post
      tags:
        - pay
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tier:
                    required:
                      - _id
                      - title
                      - price
                      - description
                      - userID
                    properties:
                      _id:
                        type: string
                      title:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      userID:
                        type: string
                      advanced:
                        type: object
                        properties:
                          limit:
                            type: object
                            properties:
                              enalbed:
                                type: boolean
                              max:
                                type: number
                          discord_role:
                            type: object
                            properties:
                              name:
                                type: string
                              id:
                                type: string
                          '':
                            type: string
                      created_at:
                        type: number
                      support:
                        type: object
                        properties:
                          is_supporting:
                            type: boolean
                    description: A tier for a creator.
                    x-examples:
                      example-1:
                        _id: '1732814647763013632'
                        title: Sponsor Sponsus!
                        price: 5
                        description: Demo tier. This can contain **markdown!**
                        userID: '1729788214794915840'
                        advanced:
                          limit:
                            enabled: true
                            max: 6
                          discord_role:
                            name: Writing Team
                            id: '622152828831662096'
                        created_at: 1556109420.166289
                    type: object
                    title: Tier
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
      description: Requires payments.tiers.write
      security:
        - Authentication: []
      summary: Create a new tier
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 50
                description:
                  type: string
                  maxLength: 25000
                price:
                  type: number
                  minimum: 1
                  maximum: 500
                advanced:
                  type: object
                  properties:
                    discord_role:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                    limit:
                      type: object
                      properties:
                        enabled:
                          type: boolean
                        max:
                          type: number
              required:
                - title
                - description
                - price
  '/v1/payments/@me/tiers/{tierID}':
    delete:
      operationId: payments.manage_tier.delete
      parameters:
        - required: true
          in: path
          name: tierID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                x-examples:
                  'Its just an object with success, nothing fancy':
                    success: true
                properties:
                  success:
                    type: boolean
                type: object
                title: APIBasicSuccess
      summary: Delete a tier
      description: ''
      tags:
        - pay
    post:
      operationId: payments.manage_tier.post
      parameters:
        - required: true
          in: path
          name: tierID
          schema:
            type: string
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                x-examples:
                  'Its just an object with success, nothing fancy':
                    success: true
                properties:
                  success:
                    type: boolean
                type: object
                title: APIBasicSuccess
            Example:
              examples:
                response:
                  value: {}
        '401':
          description: You do not have permission to write to payments.tiers
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
        '403':
          description: You do not have write access to this tier.
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
      tags:
        - payments
      summary: Update a tier
      security:
        - Authentication: []
      description: Requires payments.tiers.write
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                advanced:
                  type: object
                  properties:
                    discord_role:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                    limit:
                      type: object
                      properties:
                        enabled:
                          type: boolean
                        max:
                          type: number
        description: All fields are optional but you must send at least 1 field.
  /v1/payments/@me/supporting:
    get:
      operationId: payments.get_user_supporting
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  supporting:
                    type: array
                    items:
                      properties:
                        tier:
                          title: Tier
                          type: object
                          x-examples:
                            example-1:
                              _id: '1732814647763013632'
                              title: Sponsor Sponsus!
                              price: 5
                              description: Demo tier. This can contain **markdown!**
                              userID: '1729788214794915840'
                              advanced:
                                limit:
                                  enabled: true
                                  max: 6
                                discord_role:
                                  name: Writing Team
                                  id: '622152828831662096'
                              created_at: 1556109420.166289
                          description: A tier for a creator.
                          properties:
                            _id:
                              type: string
                            title:
                              type: string
                            price:
                              type: number
                            description:
                              type: string
                            userID:
                              type: string
                            advanced:
                              type: object
                              properties:
                                limit:
                                  type: object
                                  properties:
                                    enalbed:
                                      type: boolean
                                    max:
                                      type: number
                                discord_role:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                    id:
                                      type: string
                                '':
                                  type: string
                            created_at:
                              type: number
                            support:
                              type: object
                              properties:
                                is_supporting:
                                  type: boolean
                          required:
                            - _id
                            - title
                            - price
                            - description
                            - userID
                        price:
                          type: number
                        owner:
                          title: Profile
                          type: object
                          x-examples:
                            Profile:
                              description: awoo!
                              about: >-
                                Hi, im Cerulean and im making a new API system
                                that will allow developers to create much more
                                indepth integrations!
                              status: public
                              theme: '#0a62ac'
                              tags: []
                              is_nsfw: false
                              cards: []
                              nickname: Nickname testing thing!
                              username: Cerulean
                              _id: '1729788214794915840'
                          description: A profile object used to describe a creator.
                          properties:
                            _id:
                              type: string
                            about:
                              type: string
                            status:
                              type: string
                            theme:
                              type: string
                            tags:
                              type: array
                              items:
                                type: string
                            is_nsfw:
                              type: string
                            cards:
                              type: array
                              items:
                                $ref: ''
                            nickname:
                              type: string
                            username:
                              type: string
                        is_active:
                          type: boolean
                        is_custom:
                          type: boolean
                        charge_amount:
                          type: number
                      type: object
                      title: Sponsorship
      tags:
        - payments
      summary: Get all creators this user is sponsoring
      description: Requires payments.sponsoring.read
      security:
        - Authentication: []
  '/v1/payments/{userID}/sponsoring':
    get:
      operationId: payments.get_user_sponsoring_status
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  sponsorship:
                    required:
                      - userID
                      - created_at
                      - is_active
                      - targetID
                      - has_paid
                      - current_month
                    properties:
                      userID:
                        type: string
                      created_at:
                        type: number
                      is_active:
                        type: boolean
                      targetID:
                        type: string
                      tier:
                        title: Tier
                        type: object
                        x-examples:
                          example-1:
                            _id: '1732814647763013632'
                            title: Sponsor Sponsus!
                            price: 5
                            description: Demo tier. This can contain **markdown!**
                            userID: '1729788214794915840'
                            advanced:
                              limit:
                                enabled: true
                                max: 6
                              discord_role:
                                name: Writing Team
                                id: '622152828831662096'
                            created_at: 1556109420.166289
                        description: A tier for a creator.
                        properties:
                          _id:
                            type: string
                          title:
                            type: string
                          price:
                            type: number
                          description:
                            type: string
                          userID:
                            type: string
                          advanced:
                            type: object
                            properties:
                              limit:
                                type: object
                                properties:
                                  enalbed:
                                    type: boolean
                                  max:
                                    type: number
                              discord_role:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  id:
                                    type: string
                              '':
                                type: string
                          created_at:
                            type: number
                          support:
                            type: object
                            properties:
                              is_supporting:
                                type: boolean
                        required:
                          - _id
                          - title
                          - price
                          - description
                          - userID
                      has_paid:
                        type: boolean
                      current_month:
                        type: string
                      is_custom:
                        type: boolean
                      active_total:
                        type: number
                      active_sponsorship_total:
                        type: number
                    description: >-
                      Slightly different to the standard sponsorship object.
                      Needs more information and doesnt need to provide creator
                      context (since the person calling the route is the
                      creator)
                    type: object
                    title: IncomingSponsorship
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
      tags:
        - payments
      description: |-
        Gets an IncomingSponsorship object if the target user is sponsoring you.

        Requires payments.sponsorships.read
        **(Sponsorships and sponsoring are two different permissions!!)**
      security:
        - Authentication: []
      summary: Get sponsorship status of a user
  '/v1/payments/{userID}/donations/settings':
    get:
      operationId: payments.set_donation_settings
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  enabled:
                    type: boolean
                  length:
                    type: string
                  limit:
                    type: string
                  social_media_image:
                    type: string
            Example:
              examples:
                response:
                  value:
                    success: true
                    enabled: true
                    length: 1month
                    limit: Thu 13/02/2020
                    social_media_image: >-
                      https://cdn.ceru.tech/sponsus/1729788214794915840/1736565642238234624.png
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
      tags:
        - payments
      summary: Get a creators donation settings
  /v1/payments/@me/charges:
    get:
      operationId: payments.get_charges
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  charges:
                    type: array
                    items:
                      description: ''
                      required:
                        - _id
                        - amount
                        - created_at
                        - avalible_at
                      properties:
                        _id:
                          type: string
                        amount:
                          type: string
                        destination:
                          title: BasicUser
                          type: object
                          properties:
                            _id:
                              type: string
                            username:
                              type: string
                          description: This is a shortform User object
                        created_at:
                          type: string
                        avalible_at:
                          type: string
                        user:
                          title: BasicUser
                          type: object
                          properties:
                            _id:
                              type: string
                            username:
                              type: string
                          description: This is a shortform User object
                        type:
                          type: string
                        avalible_percent:
                          type: string
                        created_at_stamp:
                          type: string
                      type: object
                      title: Charge
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
      tags:
        - payments
      description: Requires payments.charges.read
  '/v1/profiles/{userID}/per_month':
    get:
      operationId: profile.calc_per_month.get
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  sponsors:
                    type: number
                    description: How many sponsorships does this creator have
                  total:
                    type: number
                    description: 'How much, in $, does this creator get'
                required:
                  - success
            Example:
              examples:
                response:
                  value:
                    success: true
                    total: 10
                    sponsors: 2
      summary: Get
    post:
      operationId: profile.calc_per_month.post
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/profiles/{userID}/post_tags':
    get:
      operationId: profile.get_post_tags
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  tags:
                    type: array
                    items:
                      items: {}
                      type: array
                      title: PostTag
            Example:
              examples:
                response:
                  value: {}
      summary: Get a creators post tags
  '/v1/profiles/{userID}/post_total':
    get:
      operationId: profile.get_post_total
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  total:
                    type: number
      description: >-
        Gets a total of all posts released by this creator (for use in the
        frontend)
      summary: Get a creators post count
  /v1/profiles/@me:
    get:
      operationId: profile.get_set_user_profile.get
      tags:
        - profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  profile:
                    properties:
                      _id:
                        type: string
                      about:
                        type: string
                      status:
                        type: string
                      theme:
                        type: string
                      tags:
                        type: array
                        items:
                          type: string
                      is_nsfw:
                        type: string
                      cards:
                        type: array
                        items:
                          $ref: ''
                      nickname:
                        type: string
                      username:
                        type: string
                    description: A profile object used to describe a creator.
                    x-examples:
                      Profile:
                        description: awoo!
                        about: >-
                          Hi, im Cerulean and im making a new API system that
                          will allow developers to create much more indepth
                          integrations!
                        status: public
                        theme: '#0a62ac'
                        tags: []
                        is_nsfw: false
                        cards: []
                        nickname: Nickname testing thing!
                        username: Cerulean
                        _id: '1729788214794915840'
                    type: object
                    title: Profile
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
      summary: Get the logged in user's profile
      security:
        - Authentication: []
      description: Requires profile.profile.read
    post:
      operationId: profile.get_set_user_profile.post
      tags:
        - profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                x-examples:
                  'Its just an object with success, nothing fancy':
                    success: true
                properties:
                  success:
                    type: boolean
                type: object
                title: APIBasicSuccess
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
      summary: Update your profile
      description: Requires profile.profile.write
      security:
        - Authentication: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                about:
                  type: string
                theme:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                is_nsfw:
                  type: boolean
                cards:
                  title: ProfileCard
                  type: object
                  x-examples:
                    card:
                      title: AWOO
                      content: AWEOO
                      image: >-
                        https://cdn.ceru.tech/sponsus/1729788214794915840/1818387122831364096.png
                      link: ''
                  properties:
                    title:
                      type: string
                    content:
                      type: string
                    image:
                      type: string
                    link:
                      type: string
                nickname:
                  type: string
        description: Updates based on the fields provided.
  '/v1/profiles/{userID}':
    get:
      operationId: profile.get_user_profile
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  profile:
                    properties:
                      _id:
                        type: string
                      about:
                        type: string
                      status:
                        type: string
                      theme:
                        type: string
                      tags:
                        type: array
                        items:
                          type: string
                      is_nsfw:
                        type: string
                      cards:
                        type: array
                        items:
                          $ref: ''
                      nickname:
                        type: string
                      username:
                        type: string
                    description: A profile object used to describe a creator.
                    x-examples:
                      Profile:
                        description: awoo!
                        about: >-
                          Hi, im Cerulean and im making a new API system that
                          will allow developers to create much more indepth
                          integrations!
                        status: public
                        theme: '#0a62ac'
                        tags: []
                        is_nsfw: false
                        cards: []
                        nickname: Nickname testing thing!
                        username: Cerulean
                        _id: '1729788214794915840'
                    type: object
                    title: Profile
      description: ''
      summary: Get a creators profile
  '/v1/profiles/{userID}/avatar/info':
    get:
      operationId: profile.get_user_avatar_info
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  is_image:
                    type: string
                  key:
                    type: string
      summary: Get user's avatar info
      description: >-
        This is used to check if an avatar is a video or image. The `key` param
        is used to beat caching while giving us caching.
  '/v1/profiles/{userID}/avatar/{key}':
    get:
      operationId: profile.get_user_avatar_with_key.get
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: key
          schema:
            type: string
      responses:
        '200':
          headers: {}
          description: OK
          content:
            application/json:
              schema:
                type: object
      summary: Get a users avatar
      description: >-
        Returns an image suitable for your device (WebP for those who support
        it, PNG for those who cant)
    head:
      operationId: profile.get_user_avatar_with_key.head
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: key
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/profiles/{userID}/avatar':
    get:
      operationId: profile.get_user_avatar.get
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      description: >-
        Returns an image suitable for your device (WebP for those who support
        it, PNG for those who cant)
      summary: Get a users avatar
    head:
      operationId: profile.get_user_avatar.head
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/profiles/{userID}/background':
    get:
      operationId: profile.get_user_background
      tags:
        - profile
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
      description: >-
        Returns an image suitable for your device (WebP for those who support
        it, PNG for those who cant)
      summary: Get a users background
  /v1/profiles/@me/avatar/upload:
    post:
      operationId: profile.upload_user_avatar
      tags:
        - profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                x-examples:
                  'Its just an object with success, nothing fancy':
                    success: true
                properties:
                  success:
                    type: boolean
                type: object
                title: APIBasicSuccess
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
      description: Requires profile.manage_images.write
      security:
        - Authentication: []
      summary: Update the user's avatar
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                file:
                  description: The new avatar in file form
                  type: string
                  format: binary
  /v1/profiles/@me/background/upload:
    post:
      operationId: profile.upload_user_background
      tags:
        - profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                x-examples:
                  'Its just an object with success, nothing fancy':
                    success: true
                properties:
                  success:
                    type: boolean
                type: object
                title: APIBasicSuccess
        '400':
          description: The was an error while uploading
          content:
            application/json:
              schema:
                x-examples:
                  AuthError:
                    success: false
                    error: Authentication token is invalid or not present
                    status: 403
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                  code:
                    type: string
                type: object
                title: APIError
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: >-
                  This is where the API cannot fulfil the request due to the API
                  key not having the correct permissions.
                x-examples:
                  Example:
                    success: false
                    error: >-
                      API key does not have permission to read to
                      "payments.tiers"
                    code: KEY_INVALID
                    missing_permission: payments.tiers.read
                properties:
                  success:
                    type: string
                  error:
                    type: string
                  code:
                    type: string
                  missing_permission:
                    type: string
                type: object
                title: APIKeyNoPermissions
      description: Requires profile.manage_images.write
      security:
        - Authentication: []
      summary: Update the user's background
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                file:
                  type: string
  /v1/notifications/@me/auth:
    get:
      operationId: notifications.set_user_key
      tags:
        - notifications
      responses:
        '200':
          description: OK
  '/v1/notifications/{notifID}/read':
    post:
      operationId: notifications.set_read
      tags:
        - notifications
      parameters:
        - required: true
          in: path
          name: notifID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/notifications/@me:
    get:
      operationId: notifications.get_notifications
      tags:
        - notifications
      responses:
        '200':
          description: OK
  /v1/notifications/@me/unread_count:
    get:
      operationId: notifications.get_recent_notifs
      tags:
        - notifications
      responses:
        '200':
          description: OK
  '/v1/comments/{postID}/comment/{commentID}/replies':
    get:
      operationId: comments.manage_comment_replies.get
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
        - required: true
          in: path
          name: commentID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: comments.manage_comment_replies.post
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
        - required: true
          in: path
          name: commentID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/comments/{postID}/comment/{commentID}/replies/stats':
    get:
      operationId: comments.replies_stats.get
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
        - required: true
          in: path
          name: commentID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: comments.replies_stats.post
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
        - required: true
          in: path
          name: commentID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/comments/{postID}/comment/{commentID}':
    delete:
      operationId: comments.manage_comment.delete
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
        - required: true
          in: path
          name: commentID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: comments.manage_comment.post
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
        - required: true
          in: path
          name: commentID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/comments/{postID}':
    get:
      operationId: comments.manage_comments.get
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: comments.manage_comments.post
      tags:
        - comments
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/permissions/@me/teams:
    get:
      operationId: perm.get_user_teams
      tags:
        - perm
      responses:
        '200':
          description: OK
  '/v1/permissions/{creatorID}/team/{userID}':
    delete:
      operationId: perm.manage_user_from_team.delete
      tags:
        - perm
      parameters:
        - required: true
          in: path
          name: creatorID
          schema:
            type: string
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: perm.manage_user_from_team.post
      tags:
        - perm
      parameters:
        - required: true
          in: path
          name: creatorID
          schema:
            type: string
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/permissions/@me/team:
    get:
      operationId: perm.manage_creator_team
      tags:
        - perm
      responses:
        '200':
          description: OK
  '/v1/permissions/@me/roles/{roleID}':
    delete:
      operationId: perm.manage_creator_role.delete
      tags:
        - perm
      parameters:
        - required: true
          in: path
          name: roleID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: perm.manage_creator_role.post
      tags:
        - perm
      parameters:
        - required: true
          in: path
          name: roleID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/permissions/@me/roles:
    get:
      operationId: perm.manage_creator_roles.get
      tags:
        - perm
      responses:
        '200':
          description: OK
    post:
      operationId: perm.manage_creator_roles.post
      tags:
        - perm
      responses:
        '200':
          description: OK
  /v1/permissions/@me/roles/positions:
    get:
      operationId: perm.manage_role_positions.get
      tags:
        - perm
      responses:
        '200':
          description: OK
    post:
      operationId: perm.manage_role_positions.post
      tags:
        - perm
      responses:
        '200':
          description: OK
  /v1/chat/search:
    get:
      operationId: chat.search_for_users
      tags:
        - chat
      responses:
        '200':
          description: OK
  /v1/chat/@me/new_conversation:
    post:
      operationId: chat.create_conversation
      tags:
        - chat
      responses:
        '200':
          description: OK
  '/v1/chat/{convoID}/members/{userID}':
    delete:
      operationId: chat.remove_user
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: convoID
          schema:
            type: string
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/chat/@me/conversations:
    get:
      operationId: chat.get_conversations
      tags:
        - chat
      responses:
        '200':
          description: OK
  '/v1/chat/{convoID}/rtm/start':
    get:
      operationId: chat.create_rtm_link
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: convoID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/chat/@me/rtm/unread/start:
    get:
      operationId: chat.create_notice_rtm_link
      tags:
        - chat
      responses:
        '200':
          description: OK
  '/v1/chat/{convoID}/messages':
    get:
      operationId: chat.manage_messages.get
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: convoID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: chat.manage_messages.post_
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: convoID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/chat/{convoID}/messages/{messageID}':
    delete:
      operationId: chat.manage_message.delete
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: convoID
          schema:
            type: string
        - required: true
          in: path
          name: messageID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: chat.manage_message.post
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: convoID
          schema:
            type: string
        - required: true
          in: path
          name: messageID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/chat/{convoID}/ack':
    post:
      operationId: chat.manage_messages.post
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: convoID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/chat/@me/unread:
    get:
      operationId: chat.manage_messages
      tags:
        - chat
      responses:
        '200':
          description: OK
  /v1/chat/@me/block_list:
    get:
      operationId: chat.block_user.get
      tags:
        - chat
      responses:
        '200':
          description: OK
    delete:
      operationId: chat.block_user.delete
      tags:
        - chat
      responses:
        '200':
          description: OK
      description: ''
    post:
      operationId: chat.block_user.post
      tags:
        - chat
      responses:
        '200':
          description: OK
  '/v1/chat/@me/block_list/{targetID}':
    delete:
      operationId: chat.unblock_user
      tags:
        - chat
      parameters:
        - required: true
          in: path
          name: targetID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/chat/@me/privacy_settings:
    get:
      operationId: chat.get_set_privacy_settings.get
      tags:
        - chat
      responses:
        '200':
          description: OK
    post:
      operationId: chat.get_set_privacy_settings.post
      tags:
        - chat
      responses:
        '200':
          description: OK
  /v1/feed/@me:
    get:
      operationId: feed.get_feed
      tags:
        - feed
      responses:
        '200':
          description: OK
  /v1/feed/@me/total:
    get:
      operationId: feed.get_total_post_count
      tags:
        - feed
      responses:
        '200':
          description: OK
  '/v1/integrations/discord/{userID}/settings':
    get:
      operationId: integrations.get_set_discord_settings.get
      tags:
        - integrations
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
      description: ''
    post:
      operationId: integrations.get_set_discord_settings.post
      tags:
        - integrations
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/integrations/{userID}/discord/invite':
    get:
      operationId: integrations.get_discord_invite
      tags:
        - integrations
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/integrations/{userID}/discord/server':
    get:
      operationId: integrations.get_discord_server
      tags:
        - integrations
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/integrations/discord/roles:
    get:
      operationId: integrations.get_discord_roles
      tags:
        - integrations
      responses:
        '200':
          description: OK
  /v1/integrations/discord:
    get:
      operationId: integrations.manage_discord_integration.get
      tags:
        - integrations
      responses:
        '200':
          description: OK
    delete:
      operationId: integrations.manage_discord_integration.delete
      tags:
        - integrations
      responses:
        '200':
          description: OK
    post:
      operationId: integrations.manage_discord_integration.post
      tags:
        - integrations
      responses:
        '200':
          description: OK
  /v1/search/@me/sponsors:
    post:
      operationId: search.search_sponsors.post
      tags:
        - search
      responses:
        '200':
          description: OK
  /v1/search/@me/total_sponsors:
    get:
      operationId: search.search_sponsors
      tags:
        - search
      responses:
        '200':
          description: OK
  /v1/search:
    get:
      operationId: search.search
      tags:
        - search
      responses:
        '200':
          description: OK
  /v1/events/@me:
    get:
      operationId: events.get_events
      tags:
        - events
      responses:
        '200':
          description: OK
  '/v1/files/@me/{fileID}':
    delete:
      operationId: files.manage_file
      tags:
        - files
      parameters:
        - required: true
          in: path
          name: fileID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/files/@me:
    get:
      operationId: files.manage_files.get
      tags:
        - files
      responses:
        '200':
          description: OK
    post:
      operationId: files.manage_files.post
      tags:
        - files
      responses:
        '200':
          description: OK
  '/v1/posts/@me/{postID}/poll/close':
    get:
      operationId: posts.toggle_poll
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/{creatorID}/{postID}/poll/results':
    get:
      operationId: posts.get_poll_results
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: creatorID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/{creatorID}/{postID}/poll/answer':
    post:
      operationId: posts.poll_post.post
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: creatorID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/{creatorID}/{postID}/poll/verify':
    get:
      operationId: posts.verify_poll_results
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: creatorID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/{creatorID}/{postID}/poll':
    get:
      operationId: posts.poll_post
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: creatorID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/posts/@me:
    post:
      operationId: posts.create_a_post
      tags:
        - posts
      responses:
        '200':
          description: OK
  '/v1/posts/{userID}':
    get:
      operationId: posts.get_posts
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/{userID}/post/{postID}':
    get:
      operationId: posts.get_post.get
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
    delete:
      operationId: posts.get_post.delete
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: posts.get_post.post
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/{userID}/post/{postID}/publish':
    post:
      operationId: posts.publish_post
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/@me/post/{postID}/secret_keys':
    get:
      operationId: posts.get_post_secret_keys.get
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
    delete:
      operationId: posts.get_post_secret_keys.delete
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: posts.get_post_secret_keys.post
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/posts/@me/post/{postID}/secret_keys/{keyID}':
    delete:
      operationId: posts.delete_post_secret_keys
      tags:
        - posts
      parameters:
        - required: true
          in: path
          name: postID
          schema:
            type: string
        - required: true
          in: path
          name: keyID
          schema:
            type: string
      responses:
        '200':
          description: OK
  /v1/oauth/@me/profile:
    get:
      operationId: oauth.oauth_get_profile
      tags:
        - oauth
      responses:
        '200':
          description: OK
  /v1/permissions/@me/team/search:
    get:
      operationId: perm.search_for_users
      tags:
        - perm
      responses:
        '200':
          description: OK
  '/v1/permissions/@me/team/{userID}/invite':
    get:
      operationId: perm.invite_user_to_team.get
      tags:
        - perm
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
    post:
      operationId: perm.invite_user_to_team.post
      tags:
        - perm
      parameters:
        - required: true
          in: path
          name: userID
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/v1/permissions/{creatorID}/team/accept_invite':
    get:
      operationId: perm.accept_invite_user_to_team
      tags:
        - perm
      parameters:
        - required: true
          in: path
          name: creatorID
          schema:
            type: string
      responses:
        '200':
          description: OK
servers:
  - url: 'https://api-dev.sponsus.org/'
components:
  securitySchemes:
    Authentication:
      type: apiKey
      in: header
      description: >-
        This is the header that allows you to login as a user. Please only use
        API keys for this. Your account will be disabled if you use your login
        token for API access.


        If there is something you want access but its not avalible via API keys,
        please contact us at developers@sponsus.org
      name: idk
  schemas:
    Profile:
      title: Profile
      type: object
      x-examples:
        Profile:
          description: awoo!
          about: >-
            Hi, im Cerulean and im making a new API system that will allow
            developers to create much more indepth integrations!
          status: public
          theme: '#0a62ac'
          tags: []
          is_nsfw: false
          cards: []
          nickname: Nickname testing thing!
          username: Cerulean
          _id: '1729788214794915840'
      description: A profile object used to describe a creator.
      properties:
        _id:
          type: string
        about:
          type: string
        status:
          type: string
        theme:
          type: string
        tags:
          type: array
          items:
            type: string
        is_nsfw:
          type: string
        cards:
          type: array
          items:
            $ref: ''
        nickname:
          type: string
        username:
          type: string
    ProfileCard:
      title: ProfileCard
      type: object
      x-examples:
        card:
          title: AWOO
          content: AWEOO
          image: >-
            https://cdn.ceru.tech/sponsus/1729788214794915840/1818387122831364096.png
          link: ''
      properties:
        title:
          type: string
        content:
          type: string
        image:
          type: string
        link:
          type: string
    APIError:
      title: APIError
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
        code:
          type: string
      x-examples:
        AuthError:
          success: false
          error: Authentication token is invalid or not present
          status: 403
    APIBasicSuccess:
      title: APIBasicSuccess
      type: object
      properties:
        success:
          type: boolean
      x-examples:
        'Its just an object with success, nothing fancy':
          success: true
    Tier:
      title: Tier
      type: object
      x-examples:
        example-1:
          _id: '1732814647763013632'
          title: Sponsor Sponsus!
          price: 5
          description: Demo tier. This can contain **markdown!**
          userID: '1729788214794915840'
          advanced:
            limit:
              enabled: true
              max: 6
            discord_role:
              name: Writing Team
              id: '622152828831662096'
          created_at: 1556109420.166289
      description: A tier for a creator.
      properties:
        _id:
          type: string
        title:
          type: string
        price:
          type: number
        description:
          type: string
        userID:
          type: string
        advanced:
          type: object
          properties:
            limit:
              type: object
              properties:
                enalbed:
                  type: boolean
                max:
                  type: number
            discord_role:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: string
            '':
              type: string
        created_at:
          type: number
        support:
          type: object
          properties:
            is_supporting:
              type: boolean
      required:
        - _id
        - title
        - price
        - description
        - userID
    APIKeyNoPermissions:
      title: APIKeyNoPermissions
      type: object
      properties:
        success:
          type: string
        error:
          type: string
        code:
          type: string
        missing_permission:
          type: string
      x-examples:
        Example:
          success: false
          error: API key does not have permission to read to "payments.tiers"
          code: KEY_INVALID
          missing_permission: payments.tiers.read
      description: >-
        This is where the API cannot fulfil the request due to the API key not
        having the correct permissions.
    Sponsorship:
      title: Sponsorship
      type: object
      properties:
        tier:
          required:
            - _id
            - title
            - price
            - description
            - userID
          properties:
            _id:
              type: string
            title:
              type: string
            price:
              type: number
            description:
              type: string
            userID:
              type: string
            advanced:
              type: object
              properties:
                limit:
                  type: object
                  properties:
                    enalbed:
                      type: boolean
                    max:
                      type: number
                discord_role:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string
                '':
                  type: string
            created_at:
              type: number
            support:
              type: object
              properties:
                is_supporting:
                  type: boolean
          description: A tier for a creator.
          x-examples:
            example-1:
              _id: '1732814647763013632'
              title: Sponsor Sponsus!
              price: 5
              description: Demo tier. This can contain **markdown!**
              userID: '1729788214794915840'
              advanced:
                limit:
                  enabled: true
                  max: 6
                discord_role:
                  name: Writing Team
                  id: '622152828831662096'
              created_at: 1556109420.166289
          type: object
          title: Tier
        price:
          type: number
        owner:
          properties:
            _id:
              type: string
            about:
              type: string
            status:
              type: string
            theme:
              type: string
            tags:
              type: array
              items:
                type: string
            is_nsfw:
              type: string
            cards:
              type: array
              items:
                $ref: ''
            nickname:
              type: string
            username:
              type: string
          description: A profile object used to describe a creator.
          x-examples:
            Profile:
              description: awoo!
              about: >-
                Hi, im Cerulean and im making a new API system that will allow
                developers to create much more indepth integrations!
              status: public
              theme: '#0a62ac'
              tags: []
              is_nsfw: false
              cards: []
              nickname: Nickname testing thing!
              username: Cerulean
              _id: '1729788214794915840'
          type: object
          title: Profile
        is_active:
          type: boolean
        is_custom:
          type: boolean
        charge_amount:
          type: number
    IncomingSponsorship:
      title: IncomingSponsorship
      type: object
      description: >-
        Slightly different to the standard sponsorship object. Needs more
        information and doesnt need to provide creator context (since the person
        calling the route is the creator)
      properties:
        userID:
          type: string
        created_at:
          type: number
        is_active:
          type: boolean
        targetID:
          type: string
        tier:
          required:
            - _id
            - title
            - price
            - description
            - userID
          properties:
            _id:
              type: string
            title:
              type: string
            price:
              type: number
            description:
              type: string
            userID:
              type: string
            advanced:
              type: object
              properties:
                limit:
                  type: object
                  properties:
                    enalbed:
                      type: boolean
                    max:
                      type: number
                discord_role:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string
                '':
                  type: string
            created_at:
              type: number
            support:
              type: object
              properties:
                is_supporting:
                  type: boolean
          description: A tier for a creator.
          x-examples:
            example-1:
              _id: '1732814647763013632'
              title: Sponsor Sponsus!
              price: 5
              description: Demo tier. This can contain **markdown!**
              userID: '1729788214794915840'
              advanced:
                limit:
                  enabled: true
                  max: 6
                discord_role:
                  name: Writing Team
                  id: '622152828831662096'
              created_at: 1556109420.166289
          type: object
          title: Tier
        has_paid:
          type: boolean
        current_month:
          type: string
        is_custom:
          type: boolean
        active_total:
          type: number
        active_sponsorship_total:
          type: number
      required:
        - userID
        - created_at
        - is_active
        - targetID
        - has_paid
        - current_month
    Charge:
      title: Charge
      type: object
      properties:
        _id:
          type: string
        amount:
          type: string
        destination:
          description: This is a shortform User object
          properties:
            _id:
              type: string
            username:
              type: string
          type: object
          title: BasicUser
        created_at:
          type: string
        avalible_at:
          type: string
        user:
          description: This is a shortform User object
          properties:
            _id:
              type: string
            username:
              type: string
          type: object
          title: BasicUser
        type:
          type: string
        avalible_percent:
          type: string
        created_at_stamp:
          type: string
      required:
        - _id
        - amount
        - created_at
        - avalible_at
      description: ''
    BasicUser:
      title: BasicUser
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
      description: This is a shortform User object